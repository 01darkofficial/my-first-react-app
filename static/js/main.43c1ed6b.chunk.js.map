{"version":3,"sources":["components/About.js","components/FormText.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","border","borderRadius","id","type","FormText","useState","txt","setTxt","heading","placeholder","value","onChange","event","target","rows","disabled","length","onClick","newTxt","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","document","getSelection","removeAllRanges","split","filter","element","Navbar","to","title","home","aboutText","toggleMode","role","htmlFor","modeTextColour","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","modeText","setModeText","setAlert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.43c1ed6b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    const myStyle = {\r\n        color: props.mode === \"dark\"?\"white\":\"black\",\r\n        backgroundColor: props.mode === \"dark\"?\"rgb(128, 51, 51)\":\"white\"\r\n    } \r\n\r\n\r\n\r\n\r\n    // const [btnTxt, setBtnTxt] = useState(\"Enable dark Mode\");\r\n\r\n    // const toggleStyle = ()=>{\r\n    //     if(myStyle.color === \"black\"){\r\n    //         setMyStyle({\r\n    //             color: \"white\",\r\n    //             backgroundColor: \"black\"\r\n    //         });\r\n    //         setBtnTxt(\"Enable Light mode\");\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: \"black\",\r\n    //             backgroundColor: \"white\"\r\n    //         })\r\n    //         setBtnTxt(\"Enable Dark mode\")\r\n    //     }\r\n    // }\r\n    return (\r\n        <div className=\"container\" style={{border: \"2px solid white\", borderRadius: \"8px\"}}>\r\n            <h1 className=\"my-3\">About Hell's Service</h1>\r\n            <div className=\"accordion my-3\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            {/* <button className=\"btn btn-dark my-3\" onClick={toggleStyle}>{btnTxt}</button> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function FormText(props) {\r\n\r\n    const [txt, setTxt] = useState(\"\");\r\n\r\n    const handleUpperCaseClick = ()=>{\r\n        // console.log(\"UpperCase was clicked\" + txt);\r\n        let newTxt = txt.toUpperCase();\r\n        setTxt(newTxt);;\r\n        props.showAlert(\"Converted to UpperCase\", \"success\")\r\n    }\r\n\r\n    const handleLowerCaseClick = ()=>{\r\n        // console.log(\"UpperCase was clicked\" + txt);\r\n        let newTxt = txt.toLowerCase();\r\n        setTxt(newTxt);\r\n        props.showAlert(\"Converted to LowerCase\", \"success\");\r\n\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        let newTxt = \"\";\r\n        setTxt(newTxt);\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setTxt(event.target.value);\r\n    }\r\n\r\n    const handleCopyClick = ()=>{\r\n        navigator.clipboard.writeText(txt);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to clipboaed\", \"success\")\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container mb-3 my-3\"> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" placeholder=\"Enter your text here\" value={txt} onChange={handleOnChange} id=\"myBox\" rows=\"8\"   style={{backgroundColor: props.mode === \"light\"?\"white\":\"rgb(128 51 51)\", color: props.mode === \"dark\"?\"white\":\"black\" }}></textarea>\r\n            </div>\r\n            <button disabled={txt.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={handleUpperCaseClick}>Convert to UpperCase</button>\r\n            <button disabled={txt.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={handleLowerCaseClick}>Convert to LowerCase</button>\r\n            <button disabled={txt.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={txt.length===0} className=\"btn btn-danger mx-1 my-2\" onClick={handleCopyClick}>Copy Text</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h2>Your text summary</h2>\r\n            <p>{txt.split(/\\s+/).filter((element)=>{return element.length !== 0}).length} words and {txt.length} characters</p>\r\n            <p>You can read the above text in {0.008 * txt.split(\" \").filter((element)=>{return element.length !== 0}).length} minutes</p>\r\n            <h2>Preview</h2>\r\n            <p>{txt.length>0?txt:\"Nothing to preview here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.home}</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === \"light\"?\"dark\":\"light\"}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.modeTextColour}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    home: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Enter the title here\",\r\n    home: \"Enter home here\",\r\n    aboutText: \"Enter about the website here\"\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    };\r\n\r\n    return (\r\n        <div style={{height: \"50px\"}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport React, { useState } from 'react';\nimport About from './components/About';\nimport FormText from './components/FormText';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n  const [modeText, setModeText] = useState(\"Switch to Dark Mode\");\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setModeText(\"Switch to Light Mode\");\n      document.body.style.color = \"white\";\n      document.body.style.backgroundColor = \"rgb(63 0 0)\";\n      showAlert(\"Dark Mode Enabled\", \"success\");\n      // document.title = \"Hell's Service - Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"Hell's Service - Featured Mode\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install Hell's Service Now!\";\n      // }, 1500);\n    }\n    else {\n      setMode(\"light\");\n      setModeText(\"Switch to Dark Mode\");\n      document.body.style.color = \"black\"\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"Light Mode Enabled\", \"success\");\n      // document.title = \"Hell's Service - Light Mode\";\n    }\n  }\n\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"Hell\" home=\"UnderWorld\" aboutText=\"About Hell's Service\" modeTextColour={modeText} mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route path=\"/about\">\n              <About mode={mode} />\n            </Route>\n            <Route path=\"/\">\n              <FormText showAlert={showAlert} heading=\"Hell's Service - Word Counter, Character Counter\" mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}